{"version":3,"sources":["components/Auth/LogIn.js","components/Auth/logUp.js","components/Auth/RestorePassword/RestorePassword.js","page/Auth/Auth.js"],"names":["LogInBlock","state","logInForm","phone","value","touched","valid","validation","required","isPhone","password","minLength","formIsValid","error","modalRecoverPassword","loading","inputChangedHandler","event","inputID","updatedLogInForm","updatedFormElement","target","console","log","checkValidaty","inputIDs","setState","onSubmitFormHandler","axios","post","backendUrl","then","res","token","data","storage","store","get","user","set","headers","bonus","sumUserBonus","dispatch","context","type","ACTIONS","SET_BONUS_AMOUNT","props","history","push","match","path","slice","catch","err","response","message","customOptions","language","status","onModalRecoverPasswordHandler","this","location","search","labelInvalidStyle","inputInvalidStyle","disabledButtonStyle","t","forRightMenu","className","placeholder","onChange","style","marginTop","disabled","onClick","Modal","show","modalClosed","textAlign","color","fontWeight","fontSize","Spinner","switchMode","restoreMode","React","Component","contextType","storeContext","withTranslation","LogUpBlock","logUpForm","email","maxLength","isEmail","confirmedPassword","emailModalOpened","updatedLogUpForm","phoneNumber","result","onEmailModalClosedHandler","paddingBottom","width","minWidth","padding","MobileRestorePassword","updatedEmail","MobileLogIn","useState","authMode","setAuthMode","changeAuthModeToLogIn","paddingTop","LogIn","RestorePassword"],"mappings":"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","file":"static/js/11.2a8a9d7c.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport store from 'store';\nimport {withTranslation} from \"react-i18next\";\nimport { backendUrl } from '../../config/config';\n\nimport './auth.scss';\n\nimport Modal from '../UI/Modal/Modal';\nimport Spinner from '../Spinner/index';\nimport { checkValidaty } from '../../tools/checkValidaty';\nimport { storeContext } from '../../context/providerContext';\nimport { ACTIONS } from \"../../context/providerContext\";\n\nclass LogInBlock extends React.Component {\n\n    static contextType = storeContext;\n\n    state = {\n        logInForm : {\n            phone: {\n                value: '',\n                touched: false,\n                valid: false,\n                validation: {\n                    required: true,\n                    isPhone: true\n                }\n            },\n            password: {\n                value: '',\n                touched: false,\n                valid: false,\n                validation: {\n                    required: true,\n                    minLength: 6\n                }\n            }\n        },\n        formIsValid: false,\n        error: null,\n        modalRecoverPassword: false,\n        loading: false\n    }\n\n    componentDidMount() {\n        if ( this.props.location.search === '?changed-password=true' ) {\n            this.setState({ modalRecoverPassword: true });\n        }\n    }\n\n    inputChangedHandler = (event, inputID) => {\n        const updatedLogInForm = {\n            ...this.state.logInForm\n        };\n        const updatedFormElement = {\n            ...updatedLogInForm[inputID]\n        };\n\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.touched = true;\n        console.log(updatedFormElement.value);\n        updatedFormElement.valid = checkValidaty(\n            updatedFormElement.value,\n            updatedFormElement.validation\n        );\n        updatedLogInForm[inputID] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let inputIDs in updatedLogInForm) {\n            formIsValid = updatedLogInForm[inputIDs].valid && formIsValid;\n        };\n\n        this.setState({\n            logInForm: updatedLogInForm,\n            formIsValid: formIsValid\n        });\n    }\n\n    onSubmitFormHandler = () => {\n        this.setState({ loading: true });\n\n        axios.post(backendUrl + '/login', {\n            phone: this.state.logInForm.phone.value,\n            password: this.state.logInForm.password.value\n        }).then(res => {\n            const token = res.data.token;\n            const storage = store.get('24rolls');\n            storage.user = { token };\n            store.set('24rolls', storage);\n            this.setState({\n                error: null\n            });\n\n            axios.get(backendUrl + '/user/', {\n            headers: {\n                'Authorization': `Bearer ${store.get('24rolls').user.token}`\n            }\n            })\n            .then(res => {\n                const bonus = res.data.user.sumUserBonus;\n                const { dispatch } = this.context;\n\n                dispatch({ type: ACTIONS.SET_BONUS_AMOUNT, bonus: bonus});\n                this.setState({ loading: false });\n                this.props.history.push(this.props.match.path.slice(0, 3) + '/?redirectpersonal=true');\n            })\n            .catch(err => console.log(err, err.response));\n        })\n        .catch(err => {\n            let message = '';\n            const language = store.get('24rolls').customOptions.language;\n            if (language === 'RU') {\n                if ( err.response.status === 404 ) {\n                    message = 'Неверный пароль'\n                } \n                if ( err.response.status === 401 ) {\n                    message = 'Пользователь с таким номером телефона не зарегистрирован'\n                }\n            } else {\n                if ( err.response.status === 404 ) {\n                    message = 'Невірний пароль'\n                } \n                if ( err.response.status === 401 ) {\n                    message = 'Користувач з таким номером телефону не зареєстрований'\n                }\n            }\n            this.setState({ error: message, loading: false });\n        });\n    }\n\n    onModalRecoverPasswordHandler = () => {\n        this.setState({\n            modalRecoverPassword: false\n        });\n        this.props.history.push(this.props.match.path.slice(0, 3) + '/log-in');\n    }\n\n    render() {\n\n        const labelInvalidStyle = \"label-invalid-style\";\n        const inputInvalidStyle = \"input-invalid-style\";\n        const disabledButtonStyle = \"form-button-disabled\";\n        const {t} = this.props;\n\n        return (\n            <>\n            {this.props.forRightMenu ?\n            (\n                <div>\n                        <h3>{t('order.logIn.entrance')}</h3>\n                        <label\n                        className={\n                            !this.state.logInForm.phone.valid && \n                            this.state.logInForm.phone.touched ? labelInvalidStyle : null}\n                        >\n                            {t('order.logIn.phone')}\n                        </label>\n                        <input \n                        type=\"text\" \n                        className={\n                            !this.state.logInForm.phone.valid && \n                            this.state.logInForm.phone.touched ? inputInvalidStyle : null }\n                        placeholder=\"+380631122333\"\n                        value={this.state.logInForm.phone.value} \n                        onChange={(event)=>this.inputChangedHandler(event, \"phone\")} />\n                        <label \n                        style={{marginTop: '20px'}}\n                        className={\n                            !this.state.logInForm.password.valid && \n                            this.state.logInForm.password.touched ? labelInvalidStyle : null }\n                        >\n                            {t('order.logIn.password')}\n                        </label>\n                        <input \n                        type=\"password\" \n                        className={\n                            !this.state.logInForm.password.valid && \n                            this.state.logInForm.password.touched ? inputInvalidStyle : null }\n                        placeholder={t('order.logIn.enterPassword')}\n                        value={this.state.logInForm.password.value} \n                        onChange={(event)=>this.inputChangedHandler(event, \"password\")} />\n\n                        <p className=\"log-in-block__error\">{this.state.error}</p>\n\n                        <button \n                        disabled={!this.state.formIsValid} \n                        className={!this.state.formIsValid ? disabledButtonStyle : null}\n                        onClick={this.onSubmitFormHandler}>\n                            {t('button.logIn')}\n                        </button>\n                </div>\n            )\n            :\n            (\n            <>\n                <Modal\n                show={this.state.modalRecoverPassword}\n                modalClosed={this.onModalRecoverPasswordHandler}>\n                    <div style={{textAlign: 'center'}}>\n                        <p style={{\n                            color: 'green',\n                            textAlign: 'center',\n                            fontWeight: '700',\n                            fontSize: '24px'\n                        }}>\n                            {'Вы успешно сменили пароль!'}\n                        </p>\n                    </div>\n                </Modal>\n                <div className=\"log-in-block__container\">\n                    <div className=\"log-in-block\">\n                        <h3>{t('order.logIn.entrance')}</h3>\n                        <label\n                        className={!this.state.logInForm.phone.valid && this.state.logInForm.phone.touched ? labelInvalidStyle : null}\n                        >\n                            {t('order.logIn.phone')}\n                        </label>\n                        <input \n                        type=\"text\" \n                        className={!this.state.logInForm.phone.valid && this.state.logInForm.phone.touched ? inputInvalidStyle : null }\n                        placeholder=\"+380631122333\"\n                        value={this.state.logInForm.phone.value} \n                        onChange={(event)=>this.inputChangedHandler(event, \"phone\")} />\n                        <label \n                        style={{marginTop: '20px'}}\n                        className={!this.state.logInForm.password.valid && this.state.logInForm.password.touched ? labelInvalidStyle : null }\n                        >\n                            {t('order.logIn.password')}\n                        </label>\n                        <input \n                        type=\"password\" \n                        className={!this.state.logInForm.password.valid && this.state.logInForm.password.touched ? inputInvalidStyle : null }\n                        placeholder={t('order.logIn.enterPassword')}\n                        value={this.state.logInForm.password.value} \n                        onChange={(event)=>this.inputChangedHandler(event, \"password\")} />\n\n                        <p className=\"log-in-block__error\">{this.state.error}</p>\n\n                        {this.state.loading \n                        ? <Spinner />\n                        : <button \n                        disabled={! this.state.formIsValid} className={!this.state.formIsValid ? disabledButtonStyle : null}\n                        onClick={this.onSubmitFormHandler}>\n                            {t('button.logIn')}\n                        </button>}\n                    </div>\n                    <p onClick={this.props.switchMode}>{t('order.logIn.dontHaveAccount')}</p>\n                    <p onClick={this.props.restoreMode}>{t('order.logIn.forgotPassword')}</p>\n                </div>\n            </>\n            )}\n            </>\n        );    \n    }\n};\n\nexport default withTranslation()(LogInBlock);","import React from 'react';\r\nimport Modal from '../UI/Modal/Modal';\r\nimport axios from 'axios';\r\nimport { backendUrl } from '../../config/config';\r\n\r\nimport './auth.scss';\r\n\r\nimport { checkValidaty } from '../../tools/checkValidaty';\r\nimport Spinner from '../Spinner/index';\r\n\r\nclass LogUpBlock extends React.Component {\r\n\r\n    state = {\r\n        logUpForm : {\r\n            phone: {\r\n                value: '',\r\n                touched: false,\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    isPhone: true\r\n                }\r\n            },\r\n            email: {\r\n                value: '',\r\n                touched: false,\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    maxLength: 50,\r\n                    isEmail: true\r\n                }\r\n            },\r\n            password: {\r\n                value: '',\r\n                touched: false,\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                }\r\n            },\r\n            confirmedPassword: {\r\n                value: '',\r\n                touched: false,\r\n                valid: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6,\r\n                }\r\n            }\r\n        },\r\n        formIsValid: false,\r\n        emailModalOpened: false,\r\n        error: null,\r\n        loading: false\r\n    }\r\n\r\n    inputChangedHandler = (event, inputID) => {\r\n        const updatedLogUpForm = {\r\n            ...this.state.logUpForm\r\n        };\r\n        const updatedFormElement = {\r\n            ...updatedLogUpForm[inputID]\r\n        };\r\n\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.touched = true;\r\n        console.log(updatedFormElement.value);\r\n        updatedFormElement.valid = checkValidaty(\r\n            event.target.value,\r\n            updatedFormElement.validation\r\n        );\r\n        if (inputID === 'confirmedPassword') {\r\n            updatedFormElement.valid = updatedFormElement.value === updatedLogUpForm['password'].value;\r\n        }\r\n\r\n        updatedLogUpForm[inputID] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let inputIDs in updatedLogUpForm) {\r\n            formIsValid = updatedLogUpForm[inputIDs].valid && formIsValid;\r\n        };\r\n\r\n        this.setState({\r\n            logUpForm: updatedLogUpForm,\r\n            formIsValid: formIsValid\r\n        });\r\n    }\r\n\r\n    onSubmitFormHandler = () => {\r\n\r\n        this.setState({ loading: true });\r\n\r\n        axios.post(backendUrl + '/signup', {\r\n            phoneNumber: this.state.logUpForm.phone.value,\r\n            email: this.state.logUpForm.email.value,\r\n            password: this.state.logUpForm.password.value\r\n        })\r\n        .then(result => {\r\n            if (result.status === 200 ) {\r\n                this.setState({\r\n                    emailModalOpened: true\r\n                });\r\n            }\r\n            this.setState({ loading: false, error: null });\r\n        })\r\n        .catch(err => {\r\n            let message = '';\r\n            if (this.state.language === 'RU') {\r\n                if ( err.response.status === 400 ) {\r\n                    message = 'Данные уже заняты'\r\n                } \r\n                if ( err.response.status === 500 ) {\r\n                    message = 'Данные уже заняты'\r\n                }\r\n            } else {\r\n                if ( err.response.status === 400 ) {\r\n                    message = 'Данні вже зайняті'\r\n                } \r\n                if ( err.response.status === 500 ) {\r\n                    message = 'Данні вже зайняті'\r\n                }\r\n            }\r\n            this.setState({ error: message, loading: false });\r\n        });\r\n    }\r\n\r\n    onEmailModalClosedHandler = () => {\r\n        this.setState({\r\n            emailModalOpened: false\r\n        })\r\n    }\r\n    render() {\r\n\r\n        const labelInvalidStyle = \"label-invalid-style\";\r\n        const inputInvalidStyle = \"input-invalid-style\";\r\n        const disabledButtonStyle = \"form-button-disabled log-up-button-fix\";\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n            show={this.state.emailModalOpened}\r\n            modalClosed={this.onEmailModalClosedHandler}\r\n            >       \r\n                <div style={{textAlign: 'center'}}>\r\n                    <p>\r\n                        {this.state.language === \"RU\" ? \"Пожалуйста проверьте свою почту для подтверждения аккаунта\" : \"Будь-ласка перевірте свою пошту для підтвердження аккаунту\" }\r\n                    </p>\r\n                </div>\r\n            </Modal>\r\n\r\n            <div className=\"log-in-block__container\" style={{paddingBottom: '40px'}}>\r\n                <div className=\"log-in-block log-up-block-fix\">\r\n                    <h3>{this.state.language===\"RU\" ? \"Регистрация\" : \"Реєстрація\"}</h3>\r\n\r\n                    <label\r\n                    className={!this.state.logUpForm.phone.valid && this.state.logUpForm.phone.touched ? labelInvalidStyle : null}\r\n                    >\r\n                        Ваш номер телефона\r\n                    </label>\r\n                    <input \r\n                    type=\"text\" \r\n                    className={!this.state.logUpForm.phone.valid && this.state.logUpForm.phone.touched ? inputInvalidStyle : null }\r\n                    placeholder=\"+380-99-99-99-999\"\r\n                    value={this.state.logUpForm.phone.value} \r\n                    onChange={(event)=>this.inputChangedHandler(event, \"phone\")} />\r\n\r\n                    <label\r\n                    className={!this.state.logUpForm.email.valid && this.state.logUpForm.email.touched ? labelInvalidStyle : null}\r\n                    >\r\n                        Ваш email\r\n                    </label>\r\n                    <input \r\n                    type=\"text\" \r\n                    className={!this.state.logUpForm.email.valid && this.state.logUpForm.email.touched ? inputInvalidStyle : null }\r\n                    placeholder=\"Ваш email\"\r\n                    value={this.state.logUpForm.email.value} \r\n                    onChange={(event)=>this.inputChangedHandler(event, \"email\")} />\r\n                    \r\n                    <label \r\n                    style={{marginTop: '20px'}}\r\n                    className={!this.state.logUpForm.password.valid && this.state.logUpForm.password.touched ? labelInvalidStyle : null }\r\n                    >\r\n                        Ваш пароль\r\n                    </label>\r\n                    <input \r\n                    type=\"password\" \r\n                    className={!this.state.logUpForm.password.valid && this.state.logUpForm.password.touched ? inputInvalidStyle : null }\r\n                    placeholder={this.state.language === \"RU\" ? \"Введите ваш пароль\" : \"Введіть ваш пароль\"} \r\n                    value={this.state.logUpForm.password.value} \r\n                    onChange={(event)=>this.inputChangedHandler(event, \"password\")} />\r\n\r\n                    <label \r\n                    style={{marginTop: '20px'}}\r\n                    className={!this.state.logUpForm.confirmedPassword.valid && this.state.logUpForm.confirmedPassword.touched ? labelInvalidStyle : null }\r\n                    >\r\n                        {this.state.language === \"RU\" ? \"Подтвердите пароль\" : \"Підтвердіть пароль\"}\r\n                    </label>\r\n                    <input \r\n                    type=\"password\" \r\n                    className={!this.state.logUpForm.confirmedPassword.valid && this.state.logUpForm.confirmedPassword.touched ? inputInvalidStyle : null }\r\n                    placeholder={this.state.language === \"RU\" ? \"Подтвердите ваш пароль\" : \"Підтвердіть ваш пароль\"}  \r\n                    value={this.state.logUpForm.confirmedPassword.value} \r\n                    onChange={(event)=>this.inputChangedHandler(event, \"confirmedPassword\")} />\r\n\r\n                    {this.state.error && <p className=\"log-in-block__error\">{this.state.error}</p>}\r\n\r\n                    {this.state.loading ? <Spinner /> :\r\n                    <button \r\n                    style={{ width: '100%', minWidth: '220px', padding: '20px' }}\r\n                    disabled={! this.state.formIsValid} className={!this.state.formIsValid ? disabledButtonStyle : \"log-up-button-fix\"}\r\n                    onClick={this.onSubmitFormHandler}>\r\n                        {this.state.language === \"RU\" ? \"Зарегистрироваться\" : \"Зареєструватись\"}\r\n                    </button>}\r\n                </div>\r\n                <p onClick={this.props.switchMode}>\r\n                    {this.state.language === \"RU\" ? \"У меня есть аккаунт\" : \"У мене є аккаунт\"}\r\n                </p>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LogUpBlock;","import React from 'react';\r\nimport axios from 'axios';\r\nimport { backendUrl } from '../../../config/config';\r\n\r\nimport Modal from '../../UI/Modal/Modal';\r\nimport Spinner from '../../Spinner/index';\r\nimport { checkValidaty } from '../../../tools/checkValidaty';\r\nimport '../../../components/Auth/auth.scss';\r\n\r\nclass MobileRestorePassword extends React.Component {\r\n\r\n    state = {\r\n        email: {\r\n            value: '',\r\n            touched: false,\r\n            valid: false,\r\n            validation: {\r\n                required: true,\r\n                isEmail: true\r\n            }\r\n        },\r\n        error: null,\r\n        emailModalOpened: false,\r\n        loading: false\r\n    }\r\n\r\n    inputChangedHandler = (event) => {\r\n        const updatedEmail = {\r\n            ...this.state.email\r\n        };\r\n\r\n        updatedEmail.value = event.target.value;\r\n        updatedEmail.touched = true;\r\n\r\n        updatedEmail.valid = checkValidaty(\r\n            updatedEmail.value,\r\n            updatedEmail.validation\r\n        );\r\n\r\n        this.setState({\r\n            email: updatedEmail\r\n        });\r\n    }\r\n\r\n    onSubmitFormHandler = () => {\r\n\r\n        this.setState({ loading: true });\r\n\r\n        axios.post(backendUrl + '/recover', {\r\n            email: this.state.email.value\r\n        })\r\n            .then(res => {\r\n                this.setState({\r\n                    emailModalOpened: true,\r\n                    loading: false,\r\n                    error: null\r\n                }); \r\n            })\r\n            .catch(err => {\r\n                if ( err.response.status === 401 ) {\r\n                    this.setState({\r\n                        error: 'Пользователь с таким email не существует',\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n    }\r\n\r\n    onEmailModalClosedHandler = () => {\r\n        this.setState({\r\n            emailModalOpened: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const labelInvalidStyle = \"label-invalid-style\";\r\n        const inputInvalidStyle = \"input-invalid-style\";\r\n        const disabledButtonStyle = \"form-button-disabled\";\r\n\r\n        return (\r\n            <>\r\n                <Modal\r\n                show={this.state.emailModalOpened}\r\n                modalClosed={this.onEmailModalClosedHandler}\r\n                >       \r\n                    <div style={{textAlign: 'center'}}>\r\n                        <p>\r\n                            {\"Пожалуйста проверьте свою почту для смены пароля\"}\r\n                        </p>\r\n                    </div>\r\n                </Modal>\r\n                <div className=\"log-in-block__container\" style={{paddingBottom: '40px'}}>\r\n                    <div className=\"log-in-block log-up-block-fix\">\r\n                        <h3>{\"Восстановление пароля\"}</h3>\r\n    \r\n                        <label\r\n                        className={!this.state.email.valid && this.state.email.touched ? labelInvalidStyle : null}\r\n                        >\r\n                            Ваш email\r\n                        </label>\r\n                        <input \r\n                        type=\"text\" \r\n                        className={!this.state.email.valid && this.state.email.touched ? inputInvalidStyle : null }\r\n                        placeholder=\"Ваш email\"\r\n                        value={this.state.email.value} \r\n                        onChange={(event)=>this.inputChangedHandler(event)} />\r\n    \r\n                        {this.state.error && <p className=\"log-in-block__error\">{this.state.error}</p>}\r\n    \r\n                        {this.state.loading ? <Spinner /> :\r\n                        <button \r\n                        style={{ width: '100%', minWidth: '220px', padding: '20px' }}\r\n                        disabled={! this.state.email.valid} className={!this.state.email.valid ? disabledButtonStyle : \"log-up-button-fix\"}\r\n                        onClick={this.onSubmitFormHandler}>\r\n                            {\"Восстановить пароль\"}\r\n                        </button>}\r\n                    </div>\r\n                    <p onClick={this.props.switchMode}>\r\n                        {\"Обратно к входу\"}\r\n                    </p>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n};\r\n\r\nexport default MobileRestorePassword;","import React, { useState } from 'react';\r\n\r\nimport LogIn from '../../components/Auth/LogIn';\r\nimport LogUp from '../../components/Auth/logUp';\r\nimport RestorePassword from '../../components/Auth/RestorePassword/RestorePassword';\r\n\r\nconst MobileLogIn = ( props ) => {\r\n    const [authMode, setAuthMode ] = useState('log-in');\r\n\r\n    const changeAuthModeToLogIn = () => {\r\n        setAuthMode('log-in');\r\n    };\r\n\r\n    const changeAuthModeToLogUp = () => {\r\n        setAuthMode('log-up');\r\n    }\r\n\r\n    const changeModeToRestore = () => {\r\n        setAuthMode('restore-pass');\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{paddingTop: '50px'}}>\r\n            {authMode === 'log-in' && \r\n            (\r\n                <LogIn \r\n                {...props}\r\n                switchMode={changeAuthModeToLogUp} \r\n                restoreMode={changeModeToRestore}/>\r\n            )}\r\n            {authMode === 'log-up' && \r\n            (\r\n                <LogUp\r\n                {...props} \r\n                switchMode={changeAuthModeToLogIn} />\r\n            )}\r\n            {authMode === 'restore-pass' && \r\n            (\r\n                <RestorePassword\r\n                {...props} \r\n                switchMode={changeAuthModeToLogIn} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MobileLogIn;"],"sourceRoot":""}