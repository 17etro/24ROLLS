{"version":3,"sources":["../node_modules/react-icons-kit/entypo/smallDown.js","page/MobileSelectCity/MobileSelectCity.js"],"names":["Object","defineProperty","exports","value","smallDown","MobileSelectCity","props","React","useState","selectOpened","setSelectOpened","langOpened","setLangOpened","useTranslation","t","i18n","cities","label","id","className","onClick","city","size","icon","map","el","setCity","storage","store","get","customOptions","set","onSetBaseName","history","push","onChangeCityHandler","style","textTransform","language","e","changeLanguage"],"mappings":"2GAEAA,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,eAAY,EAUpBF,EAAQE,UATQ,CACd,QAAW,YACX,SAAY,CAAC,CACX,KAAQ,OACR,QAAW,CACT,EAAK,2O,gJCsHIC,UAzHU,SAACC,GAAW,IAAD,EAEUC,IAAMC,UAAS,GAFzB,mBAExBC,EAFwB,KAEVC,EAFU,OAGMH,IAAMC,UAAS,GAHrB,mBAGxBG,EAHwB,KAGZC,EAHY,OAKZC,cAAZC,EALwB,EAKxBA,EAAGC,EALqB,EAKrBA,KAELC,EAAS,CACX,CACIC,MAAOH,EAAE,YACTI,GAAI,GAER,CACID,MAAOH,EAAE,YACTI,GAAI,GAER,CACID,MAAOH,EAAE,YACTI,GAAI,IA+CZ,OACI,qCACA,sBAAKC,UAAU,8BAAf,UACI,qBAAIC,QAnCQ,WAChBV,GAAiBD,IAkCb,UACKK,EAAE,mBACH,+BACKE,EAAOV,EAAMe,KAAO,GAAGJ,QAE5B,4BACI,cAAC,OAAD,CACAK,KAAM,OACNC,KAAMnB,mBAIbK,GAAgB,sBAAKU,UAAU,oCAAf,UACb,4BAAIL,EAAE,uBACLE,EAAOQ,KAAI,SAAAC,GAAE,OACV,sBAEAL,QAAS,kBApCG,SAACF,GACzBR,GAAiBD,GACjBH,EAAMoB,QAAQR,GACd,IAAMS,EAAUC,IAAMC,IAAI,WAEtBF,EAAQG,cAAcT,KADf,IAAPH,EAC6B,SACf,IAAPA,EACsB,YAEA,UAEjCU,IAAMG,IAAI,UAAWJ,GACrBrB,EAAM0B,cAAqB,IAAPd,EAAW,MAAe,IAAPA,EAAW,MAAQ,OAC1DZ,EAAM2B,QAAQC,KAAK,KAuBQC,CAAoBV,EAAGP,KAFtC,SAIKO,EAAGR,OAHHQ,EAAGP,aAQpB,sBAAKC,UAAU,8BAAf,UACA,qBAAIC,QAzDc,WAClBR,GAAeD,IAwDf,UACKG,EAAE,mBACH,sBAAMsB,MAAO,CAACC,cAAc,aAA5B,SACKtB,EAAKuB,WAEV,4BACI,cAAC,OAAD,CACAhB,KAAM,OACNC,KAAMnB,mBAIbO,GAAc,sBAAKQ,UAAU,oCAAf,UACX,4BAAIL,EAAE,uBApFI,CACd,CACIG,MAAO,KACPC,GAAI,GAER,CACID,MAAO,KACPC,GAAI,IA8EOM,KAAI,SAAAC,GAAE,OACb,sBAEAL,QAAS,SAACmB,GAAD,MArEJ,OAqE+Bd,EAAGR,MApE3CF,EAAKyB,eAAe,MAEpBzB,EAAKyB,eAAe,WAExB5B,GAAc,IA8DN,SAIKa,EAAGR,OAHHQ,EAAGP","file":"static/js/11.9ad06041.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.smallDown = void 0;\nvar smallDown = {\n  \"viewBox\": \"0 0 20 20\",\n  \"children\": [{\n    \"name\": \"path\",\n    \"attribs\": {\n      \"d\": \"M13.418,7.859c0.271-0.268,0.709-0.268,0.978,0c0.27,0.268,0.272,0.701,0,0.969l-3.908,3.83\\r\\n\\tc-0.27,0.268-0.707,0.268-0.979,0l-3.908-3.83c-0.27-0.267-0.27-0.701,0-0.969c0.271-0.268,0.709-0.268,0.978,0L10,11L13.418,7.859z\\r\\n\\t\"\n    }\n  }]\n};\nexports.smallDown = smallDown;","import React from 'react';\r\nimport store from 'store';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Icon } from 'react-icons-kit';\r\nimport { smallDown } from 'react-icons-kit/entypo/smallDown'\r\n\r\nimport './mobileSelectCity.scss';\r\n\r\nconst MobileSelectCity = (props) => {\r\n\r\n    const [ selectOpened, setSelectOpened ] = React.useState(false);\r\n    const [ langOpened, setLangOpened ] = React.useState(false);\r\n\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const cities = [\r\n        {\r\n            label: t('cities.1'),\r\n            id: 1\r\n        },\r\n        {\r\n            label: t('cities.2'),\r\n            id: 2\r\n        },\r\n        {\r\n            label: t('cities.3'),\r\n            id: 3\r\n        }\r\n    ];\r\n\r\n    const languages = [\r\n        {\r\n            label: 'UA',\r\n            id: 1\r\n        }, \r\n        {\r\n            label: 'RU',\r\n            id: 2\r\n        }\r\n    ];\r\n\r\n    const onSetSelect = () => {\r\n        setSelectOpened(!selectOpened);\r\n    };\r\n    const onSetLanguage = () => {\r\n        setLangOpened(!langOpened);\r\n    }\r\n\r\n    const onChangeLanguage = (event, name) => {\r\n        if (name === 'RU') {\r\n            i18n.changeLanguage('ru');\r\n        } else {\r\n            i18n.changeLanguage('ua');\r\n        }\r\n        setLangOpened(false);\r\n    }\r\n\r\n    const onChangeCityHandler = (id) => {\r\n        setSelectOpened(!selectOpened);\r\n        props.setCity(id);\r\n        const storage = store.get('24rolls');\r\n        if (id === 1) {\r\n            storage.customOptions.city = 'Dnipro';\r\n        } else if (id === 2) {\r\n            storage.customOptions.city = 'Zaporijja';\r\n        } else {\r\n            storage.customOptions.city = 'Kharkov';\r\n        }\r\n        store.set('24rolls', storage);\r\n        props.onSetBaseName(id === 1 ? '/dp' : id === 2 ? '/zp' : '/kh');\r\n        props.history.push('/');\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"mobile-selectcity-container\">\r\n            <h1 onClick={onSetSelect}>\r\n                {t('cities.yourCity')}\r\n                <span>\r\n                    {cities[props.city - 1].label}\r\n                </span> \r\n                <i>\r\n                    <Icon \r\n                    size={'100%'}\r\n                    icon={smallDown}\r\n                    />\r\n                </i>\r\n            </h1>\r\n            {selectOpened && <div className=\"mobile-selectcity-container__list\">\r\n                <p>{t('cities.chooseCity')}</p>\r\n                {cities.map(el => (\r\n                    <span\r\n                    key={el.id}\r\n                    onClick={() => onChangeCityHandler(el.id)}\r\n                    >\r\n                        {el.label}\r\n                    </span>\r\n                ))}\r\n            </div>}\r\n        </div>\r\n        <div className=\"mobile-selectcity-container\">\r\n        <h1 onClick={onSetLanguage}>\r\n            {t('cities.yourLang')}\r\n            <span style={{textTransform:'uppercase'}}>\r\n                {i18n.language}\r\n            </span> \r\n            <i>\r\n                <Icon \r\n                size={'100%'}\r\n                icon={smallDown}\r\n                />\r\n            </i>\r\n        </h1>\r\n        {langOpened && <div className=\"mobile-selectcity-container__list\">\r\n            <p>{t('cities.chooseLang')}</p>\r\n            {languages.map(el => (\r\n                <span\r\n                key={el.id}\r\n                onClick={(e) => onChangeLanguage(e, el.label)}\r\n                >\r\n                    {el.label}\r\n                </span>\r\n            ))}\r\n        </div>}\r\n    </div>\r\n    </>\r\n    );\r\n};\r\n\r\nexport default MobileSelectCity;"],"sourceRoot":""}